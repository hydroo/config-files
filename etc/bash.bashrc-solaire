# System-wide .bashrc file for interactive bash(1) shells.

# To enable the settings / commands in this file for login shells as well,
# this file has to be sourced in /etc/profile.

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, overwrite the one in /etc/profile)
PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '

# Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.
# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
#    ;;
#*)
#    ;;
#esac

# enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# sudo hint
if [ ! -e "$HOME/.sudo_as_admin_successful" ] && [ ! -e "$HOME/.hushlogin" ] ; then
    case " $(groups) " in *\ admin\ *|*\ sudo\ *)
    if [ -x /usr/bin/sudo ]; then
	cat <<-EOF
	To run a command as administrator (user "root"), use "sudo <command>".
	See "man sudo_root" for details.
	
	EOF
    fi
    esac
fi

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
	function command_not_found_handle {
	        # check because c-n-f could've been removed in the meantime
                if [ -x /usr/lib/command-not-found ]; then
		   /usr/lib/command-not-found -- "$1"
                   return $?
                elif [ -x /usr/share/command-not-found/command-not-found ]; then
		   /usr/share/command-not-found/command-not-found -- "$1"
                   return $?
		else
		   printf "%s: command not found\n" "$1" >&2
		   return 127
		fi
	}
fi

export LS_OPTIONS="$LS_OPTIONS --color=auto --group-directories-first"
export LESS="-R"

alias ls='ls $LS_OPTIONS'
alias ll='ls -l'
alias l='ls -la'

alias ..="cd .."
alias md="mkdir"

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/cube/lib
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/gasnet/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/llvm/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/opari/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/openshmem/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/otf/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/otf2/lib
export LIBRARY_PATH=$LIBRARY_PATH:/opt/cube/lib
#export LIBRARY_PATH=$LIBRARY_PATH:/opt/gasnet/lib
export LIBRARY_PATH=$LIBRARY_PATH:/opt/llvm/lib
export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib
export LIBRARY_PATH=$LIBRARY_PATH:/opt/opari/lib
export LIBRARY_PATH=$LIBRARY_PATH:/opt/openshmem/lib
export LIBRARY_PATH=$LIBRARY_PATH:/opt/otf/lib
export LIBRARY_PATH=$LIBRARY_PATH:/opt/otf2/lib
export LIBRARY_PATH=$LIBRARY_PATH:/opt/scalasca/lib
export PATH=$PATH:$HOME/bin
export PATH=$PATH:/opt/cube/bin
#export PATH=$PATH:/opt/gasnet/bin
export PATH=$PATH:/opt/llvm/bin
export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/bin
export PATH=$PATH:/opt/opari/bin
export PATH=$PATH:/opt/openshmem/bin
export PATH=$PATH:/opt/otf/bin
export PATH=$PATH:/opt/otf2/bin
export PATH=$PATH:/opt/scalasca/bin
export PATH=$PATH:/opt/vampir/bin
export INCLUDE=$INCLUDE:/opt/cube/include
#export INCLUDE=$INCLUDE:/opt/gasnet/include
export INCLUDE=$INCLUDE:/opt/llvm/include
export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/include
export INCLUDE=$INCLUDE:/opt/opari/include
export INCLUDE=$INCLUDE:/opt/openshmem/include
export INCLUDE=$INCLUDE:/opt/otf/include
export INCLUDE=$INCLUDE:/opt/otf2/include

tabs 4
